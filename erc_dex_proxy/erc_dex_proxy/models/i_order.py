# coding: utf-8

"""
    ERC dEX Proxy Service

    Command line app for ERC dEX Trading Automation  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'date_closed': 'datetime',
        'exchange_address': 'str',
        'expiration_time_seconds': 'str',
        'fee_recipient_address': 'str',
        'maker_address': 'str',
        'maker_fee': 'str',
        'maker_asset_address': 'str',
        'maker_asset_data': 'str',
        'taker_asset_data': 'str',
        'maker_asset_amount': 'str',
        'salt': 'str',
        'signature': 'str',
        'taker_address': 'str',
        'taker_fee': 'str',
        'taker_asset_address': 'str',
        'taker_asset_amount': 'str',
        'remaining_fillable_taker_amount': 'str',
        'remaining_fillable_maker_amount': 'str',
        'order_hash': 'str',
        'account_id': 'float',
        'state': 'float',
        'price': 'str',
        'sender_address': 'str',
        'system': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'date_closed': 'dateClosed',
        'exchange_address': 'exchangeAddress',
        'expiration_time_seconds': 'expirationTimeSeconds',
        'fee_recipient_address': 'feeRecipientAddress',
        'maker_address': 'makerAddress',
        'maker_fee': 'makerFee',
        'maker_asset_address': 'makerAssetAddress',
        'maker_asset_data': 'makerAssetData',
        'taker_asset_data': 'takerAssetData',
        'maker_asset_amount': 'makerAssetAmount',
        'salt': 'salt',
        'signature': 'signature',
        'taker_address': 'takerAddress',
        'taker_fee': 'takerFee',
        'taker_asset_address': 'takerAssetAddress',
        'taker_asset_amount': 'takerAssetAmount',
        'remaining_fillable_taker_amount': 'remainingFillableTakerAmount',
        'remaining_fillable_maker_amount': 'remainingFillableMakerAmount',
        'order_hash': 'orderHash',
        'account_id': 'accountId',
        'state': 'state',
        'price': 'price',
        'sender_address': 'senderAddress',
        'system': 'system'
    }

    def __init__(self, id=None, date_created=None, date_updated=None, date_closed=None, exchange_address=None, expiration_time_seconds=None, fee_recipient_address=None, maker_address=None, maker_fee=None, maker_asset_address=None, maker_asset_data=None, taker_asset_data=None, maker_asset_amount=None, salt=None, signature=None, taker_address=None, taker_fee=None, taker_asset_address=None, taker_asset_amount=None, remaining_fillable_taker_amount=None, remaining_fillable_maker_amount=None, order_hash=None, account_id=None, state=None, price=None, sender_address=None, system=None):  # noqa: E501
        """IOrder - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_created = None
        self._date_updated = None
        self._date_closed = None
        self._exchange_address = None
        self._expiration_time_seconds = None
        self._fee_recipient_address = None
        self._maker_address = None
        self._maker_fee = None
        self._maker_asset_address = None
        self._maker_asset_data = None
        self._taker_asset_data = None
        self._maker_asset_amount = None
        self._salt = None
        self._signature = None
        self._taker_address = None
        self._taker_fee = None
        self._taker_asset_address = None
        self._taker_asset_amount = None
        self._remaining_fillable_taker_amount = None
        self._remaining_fillable_maker_amount = None
        self._order_hash = None
        self._account_id = None
        self._state = None
        self._price = None
        self._sender_address = None
        self._system = None
        self.discriminator = None

        self.id = id
        self.date_created = date_created
        self.date_updated = date_updated
        if date_closed is not None:
            self.date_closed = date_closed
        self.exchange_address = exchange_address
        self.expiration_time_seconds = expiration_time_seconds
        self.fee_recipient_address = fee_recipient_address
        self.maker_address = maker_address
        self.maker_fee = maker_fee
        self.maker_asset_address = maker_asset_address
        self.maker_asset_data = maker_asset_data
        self.taker_asset_data = taker_asset_data
        self.maker_asset_amount = maker_asset_amount
        self.salt = salt
        self.signature = signature
        self.taker_address = taker_address
        self.taker_fee = taker_fee
        self.taker_asset_address = taker_asset_address
        self.taker_asset_amount = taker_asset_amount
        self.remaining_fillable_taker_amount = remaining_fillable_taker_amount
        self.remaining_fillable_maker_amount = remaining_fillable_maker_amount
        self.order_hash = order_hash
        if account_id is not None:
            self.account_id = account_id
        self.state = state
        self.price = price
        self.sender_address = sender_address
        self.system = system

    @property
    def id(self):
        """Gets the id of this IOrder.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this IOrder.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IOrder.

        Unique Identifier  # noqa: E501

        :param id: The id of this IOrder.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this IOrder.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The date_created of this IOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IOrder.

        Date of creation  # noqa: E501

        :param date_created: The date_created of this IOrder.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this IOrder.  # noqa: E501

        Date of updated  # noqa: E501

        :return: The date_updated of this IOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this IOrder.

        Date of updated  # noqa: E501

        :param date_updated: The date_updated of this IOrder.  # noqa: E501
        :type: datetime
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def date_closed(self):
        """Gets the date_closed of this IOrder.  # noqa: E501

        Date on which the order was closed through fill, cancel, etc  # noqa: E501

        :return: The date_closed of this IOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed):
        """Sets the date_closed of this IOrder.

        Date on which the order was closed through fill, cancel, etc  # noqa: E501

        :param date_closed: The date_closed of this IOrder.  # noqa: E501
        :type: datetime
        """

        self._date_closed = date_closed

    @property
    def exchange_address(self):
        """Gets the exchange_address of this IOrder.  # noqa: E501

        0x Exchange Contract Address  # noqa: E501

        :return: The exchange_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._exchange_address

    @exchange_address.setter
    def exchange_address(self, exchange_address):
        """Sets the exchange_address of this IOrder.

        0x Exchange Contract Address  # noqa: E501

        :param exchange_address: The exchange_address of this IOrder.  # noqa: E501
        :type: str
        """
        if exchange_address is None:
            raise ValueError("Invalid value for `exchange_address`, must not be `None`")  # noqa: E501

        self._exchange_address = exchange_address

    @property
    def expiration_time_seconds(self):
        """Gets the expiration_time_seconds of this IOrder.  # noqa: E501

        Unix timestamp of order expiration (in seconds)  # noqa: E501

        :return: The expiration_time_seconds of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._expiration_time_seconds

    @expiration_time_seconds.setter
    def expiration_time_seconds(self, expiration_time_seconds):
        """Sets the expiration_time_seconds of this IOrder.

        Unix timestamp of order expiration (in seconds)  # noqa: E501

        :param expiration_time_seconds: The expiration_time_seconds of this IOrder.  # noqa: E501
        :type: str
        """
        if expiration_time_seconds is None:
            raise ValueError("Invalid value for `expiration_time_seconds`, must not be `None`")  # noqa: E501

        self._expiration_time_seconds = expiration_time_seconds

    @property
    def fee_recipient_address(self):
        """Gets the fee_recipient_address of this IOrder.  # noqa: E501

        Address of the fee recipient  # noqa: E501

        :return: The fee_recipient_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._fee_recipient_address

    @fee_recipient_address.setter
    def fee_recipient_address(self, fee_recipient_address):
        """Sets the fee_recipient_address of this IOrder.

        Address of the fee recipient  # noqa: E501

        :param fee_recipient_address: The fee_recipient_address of this IOrder.  # noqa: E501
        :type: str
        """
        if fee_recipient_address is None:
            raise ValueError("Invalid value for `fee_recipient_address`, must not be `None`")  # noqa: E501

        self._fee_recipient_address = fee_recipient_address

    @property
    def maker_address(self):
        """Gets the maker_address of this IOrder.  # noqa: E501

        Address of the order maker  # noqa: E501

        :return: The maker_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._maker_address

    @maker_address.setter
    def maker_address(self, maker_address):
        """Sets the maker_address of this IOrder.

        Address of the order maker  # noqa: E501

        :param maker_address: The maker_address of this IOrder.  # noqa: E501
        :type: str
        """
        if maker_address is None:
            raise ValueError("Invalid value for `maker_address`, must not be `None`")  # noqa: E501

        self._maker_address = maker_address

    @property
    def maker_fee(self):
        """Gets the maker_fee of this IOrder.  # noqa: E501

        Fee due from maker on order fill  # noqa: E501

        :return: The maker_fee of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._maker_fee

    @maker_fee.setter
    def maker_fee(self, maker_fee):
        """Sets the maker_fee of this IOrder.

        Fee due from maker on order fill  # noqa: E501

        :param maker_fee: The maker_fee of this IOrder.  # noqa: E501
        :type: str
        """
        if maker_fee is None:
            raise ValueError("Invalid value for `maker_fee`, must not be `None`")  # noqa: E501

        self._maker_fee = maker_fee

    @property
    def maker_asset_address(self):
        """Gets the maker_asset_address of this IOrder.  # noqa: E501

        Token address of the maker token  # noqa: E501

        :return: The maker_asset_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_address

    @maker_asset_address.setter
    def maker_asset_address(self, maker_asset_address):
        """Sets the maker_asset_address of this IOrder.

        Token address of the maker token  # noqa: E501

        :param maker_asset_address: The maker_asset_address of this IOrder.  # noqa: E501
        :type: str
        """
        if maker_asset_address is None:
            raise ValueError("Invalid value for `maker_asset_address`, must not be `None`")  # noqa: E501

        self._maker_asset_address = maker_asset_address

    @property
    def maker_asset_data(self):
        """Gets the maker_asset_data of this IOrder.  # noqa: E501

        Encoded maker asset data  # noqa: E501

        :return: The maker_asset_data of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_data

    @maker_asset_data.setter
    def maker_asset_data(self, maker_asset_data):
        """Sets the maker_asset_data of this IOrder.

        Encoded maker asset data  # noqa: E501

        :param maker_asset_data: The maker_asset_data of this IOrder.  # noqa: E501
        :type: str
        """
        if maker_asset_data is None:
            raise ValueError("Invalid value for `maker_asset_data`, must not be `None`")  # noqa: E501

        self._maker_asset_data = maker_asset_data

    @property
    def taker_asset_data(self):
        """Gets the taker_asset_data of this IOrder.  # noqa: E501

        Encoded taker asset data  # noqa: E501

        :return: The taker_asset_data of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_data

    @taker_asset_data.setter
    def taker_asset_data(self, taker_asset_data):
        """Sets the taker_asset_data of this IOrder.

        Encoded taker asset data  # noqa: E501

        :param taker_asset_data: The taker_asset_data of this IOrder.  # noqa: E501
        :type: str
        """
        if taker_asset_data is None:
            raise ValueError("Invalid value for `taker_asset_data`, must not be `None`")  # noqa: E501

        self._taker_asset_data = taker_asset_data

    @property
    def maker_asset_amount(self):
        """Gets the maker_asset_amount of this IOrder.  # noqa: E501

        Total amount of maker token in order  # noqa: E501

        :return: The maker_asset_amount of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_amount

    @maker_asset_amount.setter
    def maker_asset_amount(self, maker_asset_amount):
        """Sets the maker_asset_amount of this IOrder.

        Total amount of maker token in order  # noqa: E501

        :param maker_asset_amount: The maker_asset_amount of this IOrder.  # noqa: E501
        :type: str
        """
        if maker_asset_amount is None:
            raise ValueError("Invalid value for `maker_asset_amount`, must not be `None`")  # noqa: E501

        self._maker_asset_amount = maker_asset_amount

    @property
    def salt(self):
        """Gets the salt of this IOrder.  # noqa: E501

        Secure salt  # noqa: E501

        :return: The salt of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this IOrder.

        Secure salt  # noqa: E501

        :param salt: The salt of this IOrder.  # noqa: E501
        :type: str
        """
        if salt is None:
            raise ValueError("Invalid value for `salt`, must not be `None`")  # noqa: E501

        self._salt = salt

    @property
    def signature(self):
        """Gets the signature of this IOrder.  # noqa: E501

        Serialized version of the EC signature for signed orders  # noqa: E501

        :return: The signature of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this IOrder.

        Serialized version of the EC signature for signed orders  # noqa: E501

        :param signature: The signature of this IOrder.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def taker_address(self):
        """Gets the taker_address of this IOrder.  # noqa: E501

        Taker address; generally a null taker  # noqa: E501

        :return: The taker_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._taker_address

    @taker_address.setter
    def taker_address(self, taker_address):
        """Sets the taker_address of this IOrder.

        Taker address; generally a null taker  # noqa: E501

        :param taker_address: The taker_address of this IOrder.  # noqa: E501
        :type: str
        """
        if taker_address is None:
            raise ValueError("Invalid value for `taker_address`, must not be `None`")  # noqa: E501

        self._taker_address = taker_address

    @property
    def taker_fee(self):
        """Gets the taker_fee of this IOrder.  # noqa: E501

        Fee due from taker on order fill  # noqa: E501

        :return: The taker_fee of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._taker_fee

    @taker_fee.setter
    def taker_fee(self, taker_fee):
        """Sets the taker_fee of this IOrder.

        Fee due from taker on order fill  # noqa: E501

        :param taker_fee: The taker_fee of this IOrder.  # noqa: E501
        :type: str
        """
        if taker_fee is None:
            raise ValueError("Invalid value for `taker_fee`, must not be `None`")  # noqa: E501

        self._taker_fee = taker_fee

    @property
    def taker_asset_address(self):
        """Gets the taker_asset_address of this IOrder.  # noqa: E501

        Token address of the taker token  # noqa: E501

        :return: The taker_asset_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_address

    @taker_asset_address.setter
    def taker_asset_address(self, taker_asset_address):
        """Sets the taker_asset_address of this IOrder.

        Token address of the taker token  # noqa: E501

        :param taker_asset_address: The taker_asset_address of this IOrder.  # noqa: E501
        :type: str
        """
        if taker_asset_address is None:
            raise ValueError("Invalid value for `taker_asset_address`, must not be `None`")  # noqa: E501

        self._taker_asset_address = taker_asset_address

    @property
    def taker_asset_amount(self):
        """Gets the taker_asset_amount of this IOrder.  # noqa: E501

        Total amount of taker token in order  # noqa: E501

        :return: The taker_asset_amount of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_amount

    @taker_asset_amount.setter
    def taker_asset_amount(self, taker_asset_amount):
        """Sets the taker_asset_amount of this IOrder.

        Total amount of taker token in order  # noqa: E501

        :param taker_asset_amount: The taker_asset_amount of this IOrder.  # noqa: E501
        :type: str
        """
        if taker_asset_amount is None:
            raise ValueError("Invalid value for `taker_asset_amount`, must not be `None`")  # noqa: E501

        self._taker_asset_amount = taker_asset_amount

    @property
    def remaining_fillable_taker_amount(self):
        """Gets the remaining_fillable_taker_amount of this IOrder.  # noqa: E501

        Remaining amount that can be filled in taker tokens  # noqa: E501

        :return: The remaining_fillable_taker_amount of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._remaining_fillable_taker_amount

    @remaining_fillable_taker_amount.setter
    def remaining_fillable_taker_amount(self, remaining_fillable_taker_amount):
        """Sets the remaining_fillable_taker_amount of this IOrder.

        Remaining amount that can be filled in taker tokens  # noqa: E501

        :param remaining_fillable_taker_amount: The remaining_fillable_taker_amount of this IOrder.  # noqa: E501
        :type: str
        """
        if remaining_fillable_taker_amount is None:
            raise ValueError("Invalid value for `remaining_fillable_taker_amount`, must not be `None`")  # noqa: E501

        self._remaining_fillable_taker_amount = remaining_fillable_taker_amount

    @property
    def remaining_fillable_maker_amount(self):
        """Gets the remaining_fillable_maker_amount of this IOrder.  # noqa: E501

        Remaining amount that can be filled in maker tokens  # noqa: E501

        :return: The remaining_fillable_maker_amount of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._remaining_fillable_maker_amount

    @remaining_fillable_maker_amount.setter
    def remaining_fillable_maker_amount(self, remaining_fillable_maker_amount):
        """Sets the remaining_fillable_maker_amount of this IOrder.

        Remaining amount that can be filled in maker tokens  # noqa: E501

        :param remaining_fillable_maker_amount: The remaining_fillable_maker_amount of this IOrder.  # noqa: E501
        :type: str
        """
        if remaining_fillable_maker_amount is None:
            raise ValueError("Invalid value for `remaining_fillable_maker_amount`, must not be `None`")  # noqa: E501

        self._remaining_fillable_maker_amount = remaining_fillable_maker_amount

    @property
    def order_hash(self):
        """Gets the order_hash of this IOrder.  # noqa: E501

        The hash of the signed order  # noqa: E501

        :return: The order_hash of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_hash

    @order_hash.setter
    def order_hash(self, order_hash):
        """Sets the order_hash of this IOrder.

        The hash of the signed order  # noqa: E501

        :param order_hash: The order_hash of this IOrder.  # noqa: E501
        :type: str
        """
        if order_hash is None:
            raise ValueError("Invalid value for `order_hash`, must not be `None`")  # noqa: E501

        self._order_hash = order_hash

    @property
    def account_id(self):
        """Gets the account_id of this IOrder.  # noqa: E501

        Account ID of originator  # noqa: E501

        :return: The account_id of this IOrder.  # noqa: E501
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this IOrder.

        Account ID of originator  # noqa: E501

        :param account_id: The account_id of this IOrder.  # noqa: E501
        :type: float
        """

        self._account_id = account_id

    @property
    def state(self):
        """Gets the state of this IOrder.  # noqa: E501

        State of the order: Open (0), Canceled (1), Filled (2), Expired(3), Removed(4)  # noqa: E501

        :return: The state of this IOrder.  # noqa: E501
        :rtype: float
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IOrder.

        State of the order: Open (0), Canceled (1), Filled (2), Expired(3), Removed(4)  # noqa: E501

        :param state: The state of this IOrder.  # noqa: E501
        :type: float
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def price(self):
        """Gets the price of this IOrder.  # noqa: E501


        :return: The price of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this IOrder.


        :param price: The price of this IOrder.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def sender_address(self):
        """Gets the sender_address of this IOrder.  # noqa: E501


        :return: The sender_address of this IOrder.  # noqa: E501
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """Sets the sender_address of this IOrder.


        :param sender_address: The sender_address of this IOrder.  # noqa: E501
        :type: str
        """
        if sender_address is None:
            raise ValueError("Invalid value for `sender_address`, must not be `None`")  # noqa: E501

        self._sender_address = sender_address

    @property
    def system(self):
        """Gets the system of this IOrder.  # noqa: E501


        :return: The system of this IOrder.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this IOrder.


        :param system: The system of this IOrder.  # noqa: E501
        :type: bool
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
