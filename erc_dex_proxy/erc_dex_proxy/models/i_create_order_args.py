# coding: utf-8

"""
    ERC dEX Proxy Service

    Command line app for ERC dEX Trading Automation  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ICreateOrderArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_symbol': 'str',
        'quote_symbol': 'str',
        'side': 'str',
        'quantity': 'str',
        'price': 'str',
        'expiration_timestamp': 'str'
    }

    attribute_map = {
        'base_symbol': 'baseSymbol',
        'quote_symbol': 'quoteSymbol',
        'side': 'side',
        'quantity': 'quantity',
        'price': 'price',
        'expiration_timestamp': 'expirationTimestamp'
    }

    def __init__(self, base_symbol=None, quote_symbol=None, side=None, quantity=None, price=None, expiration_timestamp=None):  # noqa: E501
        """ICreateOrderArgs - a model defined in Swagger"""  # noqa: E501

        self._base_symbol = None
        self._quote_symbol = None
        self._side = None
        self._quantity = None
        self._price = None
        self._expiration_timestamp = None
        self.discriminator = None

        self.base_symbol = base_symbol
        self.quote_symbol = quote_symbol
        self.side = side
        self.quantity = quantity
        self.price = price
        self.expiration_timestamp = expiration_timestamp

    @property
    def base_symbol(self):
        """Gets the base_symbol of this ICreateOrderArgs.  # noqa: E501


        :return: The base_symbol of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._base_symbol

    @base_symbol.setter
    def base_symbol(self, base_symbol):
        """Sets the base_symbol of this ICreateOrderArgs.


        :param base_symbol: The base_symbol of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if base_symbol is None:
            raise ValueError("Invalid value for `base_symbol`, must not be `None`")  # noqa: E501

        self._base_symbol = base_symbol

    @property
    def quote_symbol(self):
        """Gets the quote_symbol of this ICreateOrderArgs.  # noqa: E501


        :return: The quote_symbol of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._quote_symbol

    @quote_symbol.setter
    def quote_symbol(self, quote_symbol):
        """Sets the quote_symbol of this ICreateOrderArgs.


        :param quote_symbol: The quote_symbol of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if quote_symbol is None:
            raise ValueError("Invalid value for `quote_symbol`, must not be `None`")  # noqa: E501

        self._quote_symbol = quote_symbol

    @property
    def side(self):
        """Gets the side of this ICreateOrderArgs.  # noqa: E501


        :return: The side of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ICreateOrderArgs.


        :param side: The side of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def quantity(self):
        """Gets the quantity of this ICreateOrderArgs.  # noqa: E501


        :return: The quantity of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ICreateOrderArgs.


        :param quantity: The quantity of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this ICreateOrderArgs.  # noqa: E501


        :return: The price of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ICreateOrderArgs.


        :param price: The price of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this ICreateOrderArgs.  # noqa: E501


        :return: The expiration_timestamp of this ICreateOrderArgs.  # noqa: E501
        :rtype: str
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this ICreateOrderArgs.


        :param expiration_timestamp: The expiration_timestamp of this ICreateOrderArgs.  # noqa: E501
        :type: str
        """
        if expiration_timestamp is None:
            raise ValueError("Invalid value for `expiration_timestamp`, must not be `None`")  # noqa: E501

        self._expiration_timestamp = expiration_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ICreateOrderArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
