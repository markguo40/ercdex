# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from erc_dex.api_client import ApiClient


class TradeHistoryLogsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_trade_history_logs(self, **kwargs):  # noqa: E501
        """get_trade_history_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_trade_history_logs(async=True)
        >>> result = thread.get()

        :param async bool
        :param float page: Page number (default: 1)
        :param float per_page: Page size (max 1000, default: 20)
        :param str sort_order: Sort order (default: 'date'). date: Sort by trade date
        :param str sort_direction: Sort direction (default: 'desc'). Options: asc: Ascending, desc: Descending
        :param str relayer: Name of originating 0x relayer
        :param str maker: Address of order maker
        :param str fee_recipient: Address of order feeRecipient
        :param str maker_token_address: Address of maker token
        :param str maker_token_symbol: Symbol of maker token
        :param str taker: Address of order taker
        :param str taker_token_address: Address of taker token
        :param str taker_token_symbol: Symbol of taker token
        :param str order_hash: Unique, generated hash representing 0x order
        :param str token_address: Address of token that is either maker or taker
        :param str token_symbol: Symbol of token that is either maker or taker
        :param str tx_hash: Transaction hash
        :param str trader: Address of either maker or taker
        :param datetime min_date: Minimum trade date: format (UTC): 2017-01-01T00:00:00.000Z
        :param datetime max_date: Maximum trade date. Format (UTC): 2017-01-01T00:00:00.000Z
        :param str format: Result format (default: 'json'). Options: 'json', 'csv'. CSV: Page size limited to 10000 records
        :param str pair: Token pair. Format: base_token_symbol/quote_token_symbol. Example: ZRX/WETH
        :return: IGetTradeHistoryLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_trade_history_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_history_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_trade_history_logs_with_http_info(self, **kwargs):  # noqa: E501
        """get_trade_history_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_trade_history_logs_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param float page: Page number (default: 1)
        :param float per_page: Page size (max 1000, default: 20)
        :param str sort_order: Sort order (default: 'date'). date: Sort by trade date
        :param str sort_direction: Sort direction (default: 'desc'). Options: asc: Ascending, desc: Descending
        :param str relayer: Name of originating 0x relayer
        :param str maker: Address of order maker
        :param str fee_recipient: Address of order feeRecipient
        :param str maker_token_address: Address of maker token
        :param str maker_token_symbol: Symbol of maker token
        :param str taker: Address of order taker
        :param str taker_token_address: Address of taker token
        :param str taker_token_symbol: Symbol of taker token
        :param str order_hash: Unique, generated hash representing 0x order
        :param str token_address: Address of token that is either maker or taker
        :param str token_symbol: Symbol of token that is either maker or taker
        :param str tx_hash: Transaction hash
        :param str trader: Address of either maker or taker
        :param datetime min_date: Minimum trade date: format (UTC): 2017-01-01T00:00:00.000Z
        :param datetime max_date: Maximum trade date. Format (UTC): 2017-01-01T00:00:00.000Z
        :param str format: Result format (default: 'json'). Options: 'json', 'csv'. CSV: Page size limited to 10000 records
        :param str pair: Token pair. Format: base_token_symbol/quote_token_symbol. Example: ZRX/WETH
        :return: IGetTradeHistoryLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'sort_order', 'sort_direction', 'relayer', 'maker', 'fee_recipient', 'maker_token_address', 'maker_token_symbol', 'taker', 'taker_token_address', 'taker_token_symbol', 'order_hash', 'token_address', 'token_symbol', 'tx_hash', 'trader', 'min_date', 'max_date', 'format', 'pair']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_history_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'relayer' in params:
            query_params.append(('relayer', params['relayer']))  # noqa: E501
        if 'maker' in params:
            query_params.append(('maker', params['maker']))  # noqa: E501
        if 'fee_recipient' in params:
            query_params.append(('fee_recipient', params['fee_recipient']))  # noqa: E501
        if 'maker_token_address' in params:
            query_params.append(('maker_token_address', params['maker_token_address']))  # noqa: E501
        if 'maker_token_symbol' in params:
            query_params.append(('maker_token_symbol', params['maker_token_symbol']))  # noqa: E501
        if 'taker' in params:
            query_params.append(('taker', params['taker']))  # noqa: E501
        if 'taker_token_address' in params:
            query_params.append(('taker_token_address', params['taker_token_address']))  # noqa: E501
        if 'taker_token_symbol' in params:
            query_params.append(('taker_token_symbol', params['taker_token_symbol']))  # noqa: E501
        if 'order_hash' in params:
            query_params.append(('order_hash', params['order_hash']))  # noqa: E501
        if 'token_address' in params:
            query_params.append(('token_address', params['token_address']))  # noqa: E501
        if 'token_symbol' in params:
            query_params.append(('token_symbol', params['token_symbol']))  # noqa: E501
        if 'tx_hash' in params:
            query_params.append(('tx_hash', params['tx_hash']))  # noqa: E501
        if 'trader' in params:
            query_params.append(('trader', params['trader']))  # noqa: E501
        if 'min_date' in params:
            query_params.append(('min_date', params['min_date']))  # noqa: E501
        if 'max_date' in params:
            query_params.append(('max_date', params['max_date']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trade_history_logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IGetTradeHistoryLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
