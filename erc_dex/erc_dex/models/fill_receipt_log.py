# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

# from erc_dex.models.fill_receipt import FillReceipt  # noqa: F401,E501


class FillReceiptLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'order_id': 'float',
        'receipt_id': 'float',
        'maker_address': 'str',
        'side': 'str',
        'taker_amount': 'str',
        'maker_amount': 'str',
        'price': 'str',
        'is_fee_order': 'bool',
        'receipt': 'FillReceipt'
    }

    attribute_map = {
        'id': 'id',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'order_id': 'orderId',
        'receipt_id': 'receiptId',
        'maker_address': 'makerAddress',
        'side': 'side',
        'taker_amount': 'takerAmount',
        'maker_amount': 'makerAmount',
        'price': 'price',
        'is_fee_order': 'isFeeOrder',
        'receipt': 'receipt'
    }

    def __init__(self, id=None, date_created=None, date_updated=None, order_id=None, receipt_id=None, maker_address=None, side=None, taker_amount=None, maker_amount=None, price=None, is_fee_order=None, receipt=None):  # noqa: E501
        """FillReceiptLog - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_created = None
        self._date_updated = None
        self._order_id = None
        self._receipt_id = None
        self._maker_address = None
        self._side = None
        self._taker_amount = None
        self._maker_amount = None
        self._price = None
        self._is_fee_order = None
        self._receipt = None
        self.discriminator = None

        self.id = id
        self.date_created = date_created
        self.date_updated = date_updated
        self.order_id = order_id
        self.receipt_id = receipt_id
        self.maker_address = maker_address
        self.side = side
        self.taker_amount = taker_amount
        self.maker_amount = maker_amount
        self.price = price
        self.is_fee_order = is_fee_order
        if receipt is not None:
            self.receipt = receipt

    @property
    def id(self):
        """Gets the id of this FillReceiptLog.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this FillReceiptLog.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FillReceiptLog.

        Unique Identifier  # noqa: E501

        :param id: The id of this FillReceiptLog.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this FillReceiptLog.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The date_created of this FillReceiptLog.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this FillReceiptLog.

        Date of creation  # noqa: E501

        :param date_created: The date_created of this FillReceiptLog.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this FillReceiptLog.  # noqa: E501

        Date of updated  # noqa: E501

        :return: The date_updated of this FillReceiptLog.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this FillReceiptLog.

        Date of updated  # noqa: E501

        :param date_updated: The date_updated of this FillReceiptLog.  # noqa: E501
        :type: datetime
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def order_id(self):
        """Gets the order_id of this FillReceiptLog.  # noqa: E501


        :return: The order_id of this FillReceiptLog.  # noqa: E501
        :rtype: float
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this FillReceiptLog.


        :param order_id: The order_id of this FillReceiptLog.  # noqa: E501
        :type: float
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def receipt_id(self):
        """Gets the receipt_id of this FillReceiptLog.  # noqa: E501


        :return: The receipt_id of this FillReceiptLog.  # noqa: E501
        :rtype: float
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this FillReceiptLog.


        :param receipt_id: The receipt_id of this FillReceiptLog.  # noqa: E501
        :type: float
        """
        if receipt_id is None:
            raise ValueError("Invalid value for `receipt_id`, must not be `None`")  # noqa: E501

        self._receipt_id = receipt_id

    @property
    def maker_address(self):
        """Gets the maker_address of this FillReceiptLog.  # noqa: E501


        :return: The maker_address of this FillReceiptLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_address

    @maker_address.setter
    def maker_address(self, maker_address):
        """Sets the maker_address of this FillReceiptLog.


        :param maker_address: The maker_address of this FillReceiptLog.  # noqa: E501
        :type: str
        """
        if maker_address is None:
            raise ValueError("Invalid value for `maker_address`, must not be `None`")  # noqa: E501

        self._maker_address = maker_address

    @property
    def side(self):
        """Gets the side of this FillReceiptLog.  # noqa: E501


        :return: The side of this FillReceiptLog.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this FillReceiptLog.


        :param side: The side of this FillReceiptLog.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def taker_amount(self):
        """Gets the taker_amount of this FillReceiptLog.  # noqa: E501


        :return: The taker_amount of this FillReceiptLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_amount

    @taker_amount.setter
    def taker_amount(self, taker_amount):
        """Sets the taker_amount of this FillReceiptLog.


        :param taker_amount: The taker_amount of this FillReceiptLog.  # noqa: E501
        :type: str
        """
        if taker_amount is None:
            raise ValueError("Invalid value for `taker_amount`, must not be `None`")  # noqa: E501

        self._taker_amount = taker_amount

    @property
    def maker_amount(self):
        """Gets the maker_amount of this FillReceiptLog.  # noqa: E501


        :return: The maker_amount of this FillReceiptLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_amount

    @maker_amount.setter
    def maker_amount(self, maker_amount):
        """Sets the maker_amount of this FillReceiptLog.


        :param maker_amount: The maker_amount of this FillReceiptLog.  # noqa: E501
        :type: str
        """
        if maker_amount is None:
            raise ValueError("Invalid value for `maker_amount`, must not be `None`")  # noqa: E501

        self._maker_amount = maker_amount

    @property
    def price(self):
        """Gets the price of this FillReceiptLog.  # noqa: E501


        :return: The price of this FillReceiptLog.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FillReceiptLog.


        :param price: The price of this FillReceiptLog.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def is_fee_order(self):
        """Gets the is_fee_order of this FillReceiptLog.  # noqa: E501


        :return: The is_fee_order of this FillReceiptLog.  # noqa: E501
        :rtype: bool
        """
        return self._is_fee_order

    @is_fee_order.setter
    def is_fee_order(self, is_fee_order):
        """Sets the is_fee_order of this FillReceiptLog.


        :param is_fee_order: The is_fee_order of this FillReceiptLog.  # noqa: E501
        :type: bool
        """
        if is_fee_order is None:
            raise ValueError("Invalid value for `is_fee_order`, must not be `None`")  # noqa: E501

        self._is_fee_order = is_fee_order

    @property
    def receipt(self):
        """Gets the receipt of this FillReceiptLog.  # noqa: E501


        :return: The receipt of this FillReceiptLog.  # noqa: E501
        :rtype: FillReceipt
        """
        return self._receipt

    @receipt.setter
    def receipt(self, receipt):
        """Sets the receipt of this FillReceiptLog.


        :param receipt: The receipt of this FillReceiptLog.  # noqa: E501
        :type: FillReceipt
        """

        self._receipt = receipt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FillReceiptLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
