# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IGlobalTickerRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_token_symbol': 'str',
        'quote_token_symbol': 'str',
        'base_volume': 'str',
        'quote_volume': 'str',
        'ask': 'str',
        'bid': 'str',
        'low': 'str',
        'high': 'str',
        'open': 'str',
        'last': 'str',
        'percent_change': 'str',
        'timestamp': 'float'
    }

    attribute_map = {
        'base_token_symbol': 'baseTokenSymbol',
        'quote_token_symbol': 'quoteTokenSymbol',
        'base_volume': 'baseVolume',
        'quote_volume': 'quoteVolume',
        'ask': 'ask',
        'bid': 'bid',
        'low': 'low',
        'high': 'high',
        'open': 'open',
        'last': 'last',
        'percent_change': 'percentChange',
        'timestamp': 'timestamp'
    }

    def __init__(self, base_token_symbol=None, quote_token_symbol=None, base_volume=None, quote_volume=None, ask=None, bid=None, low=None, high=None, open=None, last=None, percent_change=None, timestamp=None):  # noqa: E501
        """IGlobalTickerRecord - a model defined in Swagger"""  # noqa: E501

        self._base_token_symbol = None
        self._quote_token_symbol = None
        self._base_volume = None
        self._quote_volume = None
        self._ask = None
        self._bid = None
        self._low = None
        self._high = None
        self._open = None
        self._last = None
        self._percent_change = None
        self._timestamp = None
        self.discriminator = None

        self.base_token_symbol = base_token_symbol
        self.quote_token_symbol = quote_token_symbol
        self.base_volume = base_volume
        self.quote_volume = quote_volume
        if ask is not None:
            self.ask = ask
        if bid is not None:
            self.bid = bid
        if low is not None:
            self.low = low
        if high is not None:
            self.high = high
        if open is not None:
            self.open = open
        if last is not None:
            self.last = last
        self.percent_change = percent_change
        self.timestamp = timestamp

    @property
    def base_token_symbol(self):
        """Gets the base_token_symbol of this IGlobalTickerRecord.  # noqa: E501

        Base token of trade, e.g. 'ZRX' in 'ZRX/WETH'  # noqa: E501

        :return: The base_token_symbol of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._base_token_symbol

    @base_token_symbol.setter
    def base_token_symbol(self, base_token_symbol):
        """Sets the base_token_symbol of this IGlobalTickerRecord.

        Base token of trade, e.g. 'ZRX' in 'ZRX/WETH'  # noqa: E501

        :param base_token_symbol: The base_token_symbol of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """
        if base_token_symbol is None:
            raise ValueError("Invalid value for `base_token_symbol`, must not be `None`")  # noqa: E501

        self._base_token_symbol = base_token_symbol

    @property
    def quote_token_symbol(self):
        """Gets the quote_token_symbol of this IGlobalTickerRecord.  # noqa: E501

        Quote token of trade, e.g. 'WETH' in 'ZRX/WETH'  # noqa: E501

        :return: The quote_token_symbol of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._quote_token_symbol

    @quote_token_symbol.setter
    def quote_token_symbol(self, quote_token_symbol):
        """Sets the quote_token_symbol of this IGlobalTickerRecord.

        Quote token of trade, e.g. 'WETH' in 'ZRX/WETH'  # noqa: E501

        :param quote_token_symbol: The quote_token_symbol of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """
        if quote_token_symbol is None:
            raise ValueError("Invalid value for `quote_token_symbol`, must not be `None`")  # noqa: E501

        self._quote_token_symbol = quote_token_symbol

    @property
    def base_volume(self):
        """Gets the base_volume of this IGlobalTickerRecord.  # noqa: E501

        Volume in base token units  # noqa: E501

        :return: The base_volume of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """Sets the base_volume of this IGlobalTickerRecord.

        Volume in base token units  # noqa: E501

        :param base_volume: The base_volume of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """
        if base_volume is None:
            raise ValueError("Invalid value for `base_volume`, must not be `None`")  # noqa: E501

        self._base_volume = base_volume

    @property
    def quote_volume(self):
        """Gets the quote_volume of this IGlobalTickerRecord.  # noqa: E501

        Volume in quote token units  # noqa: E501

        :return: The quote_volume of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._quote_volume

    @quote_volume.setter
    def quote_volume(self, quote_volume):
        """Sets the quote_volume of this IGlobalTickerRecord.

        Volume in quote token units  # noqa: E501

        :param quote_volume: The quote_volume of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """
        if quote_volume is None:
            raise ValueError("Invalid value for `quote_volume`, must not be `None`")  # noqa: E501

        self._quote_volume = quote_volume

    @property
    def ask(self):
        """Gets the ask of this IGlobalTickerRecord.  # noqa: E501

        Current best (lowest) ask price  # noqa: E501

        :return: The ask of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this IGlobalTickerRecord.

        Current best (lowest) ask price  # noqa: E501

        :param ask: The ask of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._ask = ask

    @property
    def bid(self):
        """Gets the bid of this IGlobalTickerRecord.  # noqa: E501

        Current best (highest) bid price  # noqa: E501

        :return: The bid of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this IGlobalTickerRecord.

        Current best (highest) bid price  # noqa: E501

        :param bid: The bid of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._bid = bid

    @property
    def low(self):
        """Gets the low of this IGlobalTickerRecord.  # noqa: E501

        Lowest price in time period  # noqa: E501

        :return: The low of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this IGlobalTickerRecord.

        Lowest price in time period  # noqa: E501

        :param low: The low of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._low = low

    @property
    def high(self):
        """Gets the high of this IGlobalTickerRecord.  # noqa: E501

        Highest price in time period  # noqa: E501

        :return: The high of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this IGlobalTickerRecord.

        Highest price in time period  # noqa: E501

        :param high: The high of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._high = high

    @property
    def open(self):
        """Gets the open of this IGlobalTickerRecord.  # noqa: E501

        Most recent price at beginning of time period  # noqa: E501

        :return: The open of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this IGlobalTickerRecord.

        Most recent price at beginning of time period  # noqa: E501

        :param open: The open of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._open = open

    @property
    def last(self):
        """Gets the last of this IGlobalTickerRecord.  # noqa: E501

        Most recent price  # noqa: E501

        :return: The last of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this IGlobalTickerRecord.

        Most recent price  # noqa: E501

        :param last: The last of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def percent_change(self):
        """Gets the percent_change of this IGlobalTickerRecord.  # noqa: E501

        Percentage change of price in period  # noqa: E501

        :return: The percent_change of this IGlobalTickerRecord.  # noqa: E501
        :rtype: str
        """
        return self._percent_change

    @percent_change.setter
    def percent_change(self, percent_change):
        """Sets the percent_change of this IGlobalTickerRecord.

        Percentage change of price in period  # noqa: E501

        :param percent_change: The percent_change of this IGlobalTickerRecord.  # noqa: E501
        :type: str
        """
        if percent_change is None:
            raise ValueError("Invalid value for `percent_change`, must not be `None`")  # noqa: E501

        self._percent_change = percent_change

    @property
    def timestamp(self):
        """Gets the timestamp of this IGlobalTickerRecord.  # noqa: E501

        Unix timestamp of quote  # noqa: E501

        :return: The timestamp of this IGlobalTickerRecord.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this IGlobalTickerRecord.

        Unix timestamp of quote  # noqa: E501

        :param timestamp: The timestamp of this IGlobalTickerRecord.  # noqa: E501
        :type: float
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IGlobalTickerRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
