# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IOrderCreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maker_address': 'str',
        'taker_address': 'str',
        'fee_recipient_address': 'str',
        'sender_address': 'str',
        'maker_asset_amount': 'str',
        'taker_asset_amount': 'str',
        'maker_fee': 'str',
        'taker_fee': 'str',
        'maker_asset_data': 'str',
        'taker_asset_data': 'str',
        'salt': 'str',
        'exchange_address': 'str',
        'expiration_time_seconds': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'maker_address': 'makerAddress',
        'taker_address': 'takerAddress',
        'fee_recipient_address': 'feeRecipientAddress',
        'sender_address': 'senderAddress',
        'maker_asset_amount': 'makerAssetAmount',
        'taker_asset_amount': 'takerAssetAmount',
        'maker_fee': 'makerFee',
        'taker_fee': 'takerFee',
        'maker_asset_data': 'makerAssetData',
        'taker_asset_data': 'takerAssetData',
        'salt': 'salt',
        'exchange_address': 'exchangeAddress',
        'expiration_time_seconds': 'expirationTimeSeconds',
        'signature': 'signature'
    }

    def __init__(self, maker_address=None, taker_address=None, fee_recipient_address=None, sender_address=None, maker_asset_amount=None, taker_asset_amount=None, maker_fee=None, taker_fee=None, maker_asset_data=None, taker_asset_data=None, salt=None, exchange_address=None, expiration_time_seconds=None, signature=None):  # noqa: E501
        """IOrderCreationRequest - a model defined in Swagger"""  # noqa: E501

        self._maker_address = None
        self._taker_address = None
        self._fee_recipient_address = None
        self._sender_address = None
        self._maker_asset_amount = None
        self._taker_asset_amount = None
        self._maker_fee = None
        self._taker_fee = None
        self._maker_asset_data = None
        self._taker_asset_data = None
        self._salt = None
        self._exchange_address = None
        self._expiration_time_seconds = None
        self._signature = None
        self.discriminator = None

        self.maker_address = maker_address
        self.taker_address = taker_address
        self.fee_recipient_address = fee_recipient_address
        self.sender_address = sender_address
        self.maker_asset_amount = maker_asset_amount
        self.taker_asset_amount = taker_asset_amount
        self.maker_fee = maker_fee
        self.taker_fee = taker_fee
        self.maker_asset_data = maker_asset_data
        self.taker_asset_data = taker_asset_data
        self.salt = salt
        self.exchange_address = exchange_address
        self.expiration_time_seconds = expiration_time_seconds
        self.signature = signature

    @property
    def maker_address(self):
        """Gets the maker_address of this IOrderCreationRequest.  # noqa: E501

        Order maker  # noqa: E501

        :return: The maker_address of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._maker_address

    @maker_address.setter
    def maker_address(self, maker_address):
        """Sets the maker_address of this IOrderCreationRequest.

        Order maker  # noqa: E501

        :param maker_address: The maker_address of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if maker_address is None:
            raise ValueError("Invalid value for `maker_address`, must not be `None`")  # noqa: E501

        self._maker_address = maker_address

    @property
    def taker_address(self):
        """Gets the taker_address of this IOrderCreationRequest.  # noqa: E501

        Order taker; should generally be the null address (0x000...) in the case of ERC dEX  # noqa: E501

        :return: The taker_address of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._taker_address

    @taker_address.setter
    def taker_address(self, taker_address):
        """Sets the taker_address of this IOrderCreationRequest.

        Order taker; should generally be the null address (0x000...) in the case of ERC dEX  # noqa: E501

        :param taker_address: The taker_address of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if taker_address is None:
            raise ValueError("Invalid value for `taker_address`, must not be `None`")  # noqa: E501

        self._taker_address = taker_address

    @property
    def fee_recipient_address(self):
        """Gets the fee_recipient_address of this IOrderCreationRequest.  # noqa: E501

        Recipient of owed fees  # noqa: E501

        :return: The fee_recipient_address of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._fee_recipient_address

    @fee_recipient_address.setter
    def fee_recipient_address(self, fee_recipient_address):
        """Sets the fee_recipient_address of this IOrderCreationRequest.

        Recipient of owed fees  # noqa: E501

        :param fee_recipient_address: The fee_recipient_address of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if fee_recipient_address is None:
            raise ValueError("Invalid value for `fee_recipient_address`, must not be `None`")  # noqa: E501

        self._fee_recipient_address = fee_recipient_address

    @property
    def sender_address(self):
        """Gets the sender_address of this IOrderCreationRequest.  # noqa: E501

        Required order sender  # noqa: E501

        :return: The sender_address of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """Sets the sender_address of this IOrderCreationRequest.

        Required order sender  # noqa: E501

        :param sender_address: The sender_address of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if sender_address is None:
            raise ValueError("Invalid value for `sender_address`, must not be `None`")  # noqa: E501

        self._sender_address = sender_address

    @property
    def maker_asset_amount(self):
        """Gets the maker_asset_amount of this IOrderCreationRequest.  # noqa: E501

        Amount of maker token in trade  # noqa: E501

        :return: The maker_asset_amount of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_amount

    @maker_asset_amount.setter
    def maker_asset_amount(self, maker_asset_amount):
        """Sets the maker_asset_amount of this IOrderCreationRequest.

        Amount of maker token in trade  # noqa: E501

        :param maker_asset_amount: The maker_asset_amount of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if maker_asset_amount is None:
            raise ValueError("Invalid value for `maker_asset_amount`, must not be `None`")  # noqa: E501

        self._maker_asset_amount = maker_asset_amount

    @property
    def taker_asset_amount(self):
        """Gets the taker_asset_amount of this IOrderCreationRequest.  # noqa: E501

        Amount of taker token in trade  # noqa: E501

        :return: The taker_asset_amount of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_amount

    @taker_asset_amount.setter
    def taker_asset_amount(self, taker_asset_amount):
        """Sets the taker_asset_amount of this IOrderCreationRequest.

        Amount of taker token in trade  # noqa: E501

        :param taker_asset_amount: The taker_asset_amount of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if taker_asset_amount is None:
            raise ValueError("Invalid value for `taker_asset_amount`, must not be `None`")  # noqa: E501

        self._taker_asset_amount = taker_asset_amount

    @property
    def maker_fee(self):
        """Gets the maker_fee of this IOrderCreationRequest.  # noqa: E501

        Fee owed by maker  # noqa: E501

        :return: The maker_fee of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._maker_fee

    @maker_fee.setter
    def maker_fee(self, maker_fee):
        """Sets the maker_fee of this IOrderCreationRequest.

        Fee owed by maker  # noqa: E501

        :param maker_fee: The maker_fee of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if maker_fee is None:
            raise ValueError("Invalid value for `maker_fee`, must not be `None`")  # noqa: E501

        self._maker_fee = maker_fee

    @property
    def taker_fee(self):
        """Gets the taker_fee of this IOrderCreationRequest.  # noqa: E501

        Fee owed by taker  # noqa: E501

        :return: The taker_fee of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._taker_fee

    @taker_fee.setter
    def taker_fee(self, taker_fee):
        """Sets the taker_fee of this IOrderCreationRequest.

        Fee owed by taker  # noqa: E501

        :param taker_fee: The taker_fee of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if taker_fee is None:
            raise ValueError("Invalid value for `taker_fee`, must not be `None`")  # noqa: E501

        self._taker_fee = taker_fee

    @property
    def maker_asset_data(self):
        """Gets the maker_asset_data of this IOrderCreationRequest.  # noqa: E501

        Address of maker token  # noqa: E501

        :return: The maker_asset_data of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_data

    @maker_asset_data.setter
    def maker_asset_data(self, maker_asset_data):
        """Sets the maker_asset_data of this IOrderCreationRequest.

        Address of maker token  # noqa: E501

        :param maker_asset_data: The maker_asset_data of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if maker_asset_data is None:
            raise ValueError("Invalid value for `maker_asset_data`, must not be `None`")  # noqa: E501

        self._maker_asset_data = maker_asset_data

    @property
    def taker_asset_data(self):
        """Gets the taker_asset_data of this IOrderCreationRequest.  # noqa: E501

        Address of taker token  # noqa: E501

        :return: The taker_asset_data of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_data

    @taker_asset_data.setter
    def taker_asset_data(self, taker_asset_data):
        """Sets the taker_asset_data of this IOrderCreationRequest.

        Address of taker token  # noqa: E501

        :param taker_asset_data: The taker_asset_data of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if taker_asset_data is None:
            raise ValueError("Invalid value for `taker_asset_data`, must not be `None`")  # noqa: E501

        self._taker_asset_data = taker_asset_data

    @property
    def salt(self):
        """Gets the salt of this IOrderCreationRequest.  # noqa: E501

        Secure salt  # noqa: E501

        :return: The salt of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this IOrderCreationRequest.

        Secure salt  # noqa: E501

        :param salt: The salt of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if salt is None:
            raise ValueError("Invalid value for `salt`, must not be `None`")  # noqa: E501

        self._salt = salt

    @property
    def exchange_address(self):
        """Gets the exchange_address of this IOrderCreationRequest.  # noqa: E501

        Address of 0x exchange contract  # noqa: E501

        :return: The exchange_address of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._exchange_address

    @exchange_address.setter
    def exchange_address(self, exchange_address):
        """Sets the exchange_address of this IOrderCreationRequest.

        Address of 0x exchange contract  # noqa: E501

        :param exchange_address: The exchange_address of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if exchange_address is None:
            raise ValueError("Invalid value for `exchange_address`, must not be `None`")  # noqa: E501

        self._exchange_address = exchange_address

    @property
    def expiration_time_seconds(self):
        """Gets the expiration_time_seconds of this IOrderCreationRequest.  # noqa: E501

        Unix timestamp when order expires  # noqa: E501

        :return: The expiration_time_seconds of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiration_time_seconds

    @expiration_time_seconds.setter
    def expiration_time_seconds(self, expiration_time_seconds):
        """Sets the expiration_time_seconds of this IOrderCreationRequest.

        Unix timestamp when order expires  # noqa: E501

        :param expiration_time_seconds: The expiration_time_seconds of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if expiration_time_seconds is None:
            raise ValueError("Invalid value for `expiration_time_seconds`, must not be `None`")  # noqa: E501

        self._expiration_time_seconds = expiration_time_seconds

    @property
    def signature(self):
        """Gets the signature of this IOrderCreationRequest.  # noqa: E501

        Secure EC Signature  # noqa: E501

        :return: The signature of this IOrderCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this IOrderCreationRequest.

        Secure EC Signature  # noqa: E501

        :param signature: The signature of this IOrderCreationRequest.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOrderCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
