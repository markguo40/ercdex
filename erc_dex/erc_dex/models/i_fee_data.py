# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IFeeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'float',
        'token_symbol': 'str',
        'amount': 'str',
        'network_amount': 'str'
    }

    attribute_map = {
        'order_id': 'orderId',
        'token_symbol': 'tokenSymbol',
        'amount': 'amount',
        'network_amount': 'networkAmount'
    }

    def __init__(self, order_id=None, token_symbol=None, amount=None, network_amount=None):  # noqa: E501
        """IFeeData - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._token_symbol = None
        self._amount = None
        self._network_amount = None
        self.discriminator = None

        self.order_id = order_id
        self.token_symbol = token_symbol
        self.amount = amount
        self.network_amount = network_amount

    @property
    def order_id(self):
        """Gets the order_id of this IFeeData.  # noqa: E501

        ID of order used to pay the fee  # noqa: E501

        :return: The order_id of this IFeeData.  # noqa: E501
        :rtype: float
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this IFeeData.

        ID of order used to pay the fee  # noqa: E501

        :param order_id: The order_id of this IFeeData.  # noqa: E501
        :type: float
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def token_symbol(self):
        """Gets the token_symbol of this IFeeData.  # noqa: E501

        Symbol of the token used to pay fees  # noqa: E501

        :return: The token_symbol of this IFeeData.  # noqa: E501
        :rtype: str
        """
        return self._token_symbol

    @token_symbol.setter
    def token_symbol(self, token_symbol):
        """Sets the token_symbol of this IFeeData.

        Symbol of the token used to pay fees  # noqa: E501

        :param token_symbol: The token_symbol of this IFeeData.  # noqa: E501
        :type: str
        """
        if token_symbol is None:
            raise ValueError("Invalid value for `token_symbol`, must not be `None`")  # noqa: E501

        self._token_symbol = token_symbol

    @property
    def amount(self):
        """Gets the amount of this IFeeData.  # noqa: E501

        Base amount of fees paid  # noqa: E501

        :return: The amount of this IFeeData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IFeeData.

        Base amount of fees paid  # noqa: E501

        :param amount: The amount of this IFeeData.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def network_amount(self):
        """Gets the network_amount of this IFeeData.  # noqa: E501

        Base amount of fees paid to cover network fees  # noqa: E501

        :return: The network_amount of this IFeeData.  # noqa: E501
        :rtype: str
        """
        return self._network_amount

    @network_amount.setter
    def network_amount(self, network_amount):
        """Sets the network_amount of this IFeeData.

        Base amount of fees paid to cover network fees  # noqa: E501

        :param network_amount: The network_amount of this IFeeData.  # noqa: E501
        :type: str
        """
        if network_amount is None:
            raise ValueError("Invalid value for `network_amount`, must not be `None`")  # noqa: E501

        self._network_amount = network_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IFeeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
