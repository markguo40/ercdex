# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from erc_dex.models.account import Account  # noqa: F401,E501


class ApiKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'name': 'str',
        'key_id': 'str',
        'secret': 'str',
        'created_by_id': 'float',
        'account_id': 'float',
        'account': 'Account'
    }

    attribute_map = {
        'id': 'id',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'name': 'name',
        'key_id': 'keyId',
        'secret': 'secret',
        'created_by_id': 'createdById',
        'account_id': 'accountId',
        'account': 'account'
    }

    def __init__(self, id=None, date_created=None, date_updated=None, name=None, key_id=None, secret=None, created_by_id=None, account_id=None, account=None):  # noqa: E501
        """ApiKey - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_created = None
        self._date_updated = None
        self._name = None
        self._key_id = None
        self._secret = None
        self._created_by_id = None
        self._account_id = None
        self._account = None
        self.discriminator = None

        self.id = id
        self.date_created = date_created
        self.date_updated = date_updated
        self.name = name
        self.key_id = key_id
        self.secret = secret
        self.created_by_id = created_by_id
        self.account_id = account_id
        self.account = account

    @property
    def id(self):
        """Gets the id of this ApiKey.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this ApiKey.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKey.

        Unique Identifier  # noqa: E501

        :param id: The id of this ApiKey.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this ApiKey.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The date_created of this ApiKey.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiKey.

        Date of creation  # noqa: E501

        :param date_created: The date_created of this ApiKey.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiKey.  # noqa: E501

        Date of updated  # noqa: E501

        :return: The date_updated of this ApiKey.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiKey.

        Date of updated  # noqa: E501

        :param date_updated: The date_updated of this ApiKey.  # noqa: E501
        :type: datetime
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def name(self):
        """Gets the name of this ApiKey.  # noqa: E501


        :return: The name of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKey.


        :param name: The name of this ApiKey.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def key_id(self):
        """Gets the key_id of this ApiKey.  # noqa: E501


        :return: The key_id of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ApiKey.


        :param key_id: The key_id of this ApiKey.  # noqa: E501
        :type: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501

        self._key_id = key_id

    @property
    def secret(self):
        """Gets the secret of this ApiKey.  # noqa: E501

        ignore  # noqa: E501

        :return: The secret of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ApiKey.

        ignore  # noqa: E501

        :param secret: The secret of this ApiKey.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ApiKey.  # noqa: E501


        :return: The created_by_id of this ApiKey.  # noqa: E501
        :rtype: float
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ApiKey.


        :param created_by_id: The created_by_id of this ApiKey.  # noqa: E501
        :type: float
        """
        if created_by_id is None:
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def account_id(self):
        """Gets the account_id of this ApiKey.  # noqa: E501


        :return: The account_id of this ApiKey.  # noqa: E501
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ApiKey.


        :param account_id: The account_id of this ApiKey.  # noqa: E501
        :type: float
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this ApiKey.  # noqa: E501


        :return: The account of this ApiKey.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ApiKey.


        :param account: The account of this ApiKey.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
