# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TradeHistoryLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'order_hash': 'str',
        'tx_hash': 'str',
        'maker_address': 'str',
        'taker_address': 'str',
        'fee_recipient_address': 'str',
        'maker_asset_address': 'str',
        'maker_token_symbol': 'str',
        'maker_token_name': 'str',
        'maker_token_decimals': 'float',
        'maker_token_usd_price': 'str',
        'taker_asset_address': 'str',
        'taker_token_symbol': 'str',
        'taker_token_name': 'str',
        'taker_token_decimals': 'float',
        'taker_token_usd_price': 'str',
        'filled_maker_token_amount': 'str',
        'filled_maker_token_unit_amount': 'str',
        'filled_maker_token_amount_usd': 'str',
        'filled_taker_token_amount': 'str',
        'filled_taker_token_unit_amount': 'str',
        'filled_taker_token_amount_usd': 'str',
        'paid_maker_fee_amount': 'str',
        'paid_maker_fee_unit_amount': 'str',
        'paid_maker_fee_usd': 'str',
        'paid_taker_fee_amount': 'str',
        'paid_taker_fee_unit_amount': 'str',
        'paid_taker_fee_usd': 'str',
        'relayer': 'str'
    }

    attribute_map = {
        'id': 'id',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'order_hash': 'orderHash',
        'tx_hash': 'txHash',
        'maker_address': 'makerAddress',
        'taker_address': 'takerAddress',
        'fee_recipient_address': 'feeRecipientAddress',
        'maker_asset_address': 'makerAssetAddress',
        'maker_token_symbol': 'makerTokenSymbol',
        'maker_token_name': 'makerTokenName',
        'maker_token_decimals': 'makerTokenDecimals',
        'maker_token_usd_price': 'makerTokenUsdPrice',
        'taker_asset_address': 'takerAssetAddress',
        'taker_token_symbol': 'takerTokenSymbol',
        'taker_token_name': 'takerTokenName',
        'taker_token_decimals': 'takerTokenDecimals',
        'taker_token_usd_price': 'takerTokenUsdPrice',
        'filled_maker_token_amount': 'filledMakerTokenAmount',
        'filled_maker_token_unit_amount': 'filledMakerTokenUnitAmount',
        'filled_maker_token_amount_usd': 'filledMakerTokenAmountUsd',
        'filled_taker_token_amount': 'filledTakerTokenAmount',
        'filled_taker_token_unit_amount': 'filledTakerTokenUnitAmount',
        'filled_taker_token_amount_usd': 'filledTakerTokenAmountUsd',
        'paid_maker_fee_amount': 'paidMakerFeeAmount',
        'paid_maker_fee_unit_amount': 'paidMakerFeeUnitAmount',
        'paid_maker_fee_usd': 'paidMakerFeeUsd',
        'paid_taker_fee_amount': 'paidTakerFeeAmount',
        'paid_taker_fee_unit_amount': 'paidTakerFeeUnitAmount',
        'paid_taker_fee_usd': 'paidTakerFeeUsd',
        'relayer': 'relayer'
    }

    def __init__(self, id=None, date_created=None, date_updated=None, order_hash=None, tx_hash=None, maker_address=None, taker_address=None, fee_recipient_address=None, maker_asset_address=None, maker_token_symbol=None, maker_token_name=None, maker_token_decimals=None, maker_token_usd_price=None, taker_asset_address=None, taker_token_symbol=None, taker_token_name=None, taker_token_decimals=None, taker_token_usd_price=None, filled_maker_token_amount=None, filled_maker_token_unit_amount=None, filled_maker_token_amount_usd=None, filled_taker_token_amount=None, filled_taker_token_unit_amount=None, filled_taker_token_amount_usd=None, paid_maker_fee_amount=None, paid_maker_fee_unit_amount=None, paid_maker_fee_usd=None, paid_taker_fee_amount=None, paid_taker_fee_unit_amount=None, paid_taker_fee_usd=None, relayer=None):  # noqa: E501
        """TradeHistoryLog - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_created = None
        self._date_updated = None
        self._order_hash = None
        self._tx_hash = None
        self._maker_address = None
        self._taker_address = None
        self._fee_recipient_address = None
        self._maker_asset_address = None
        self._maker_token_symbol = None
        self._maker_token_name = None
        self._maker_token_decimals = None
        self._maker_token_usd_price = None
        self._taker_asset_address = None
        self._taker_token_symbol = None
        self._taker_token_name = None
        self._taker_token_decimals = None
        self._taker_token_usd_price = None
        self._filled_maker_token_amount = None
        self._filled_maker_token_unit_amount = None
        self._filled_maker_token_amount_usd = None
        self._filled_taker_token_amount = None
        self._filled_taker_token_unit_amount = None
        self._filled_taker_token_amount_usd = None
        self._paid_maker_fee_amount = None
        self._paid_maker_fee_unit_amount = None
        self._paid_maker_fee_usd = None
        self._paid_taker_fee_amount = None
        self._paid_taker_fee_unit_amount = None
        self._paid_taker_fee_usd = None
        self._relayer = None
        self.discriminator = None

        self.id = id
        self.date_created = date_created
        self.date_updated = date_updated
        self.order_hash = order_hash
        self.tx_hash = tx_hash
        self.maker_address = maker_address
        self.taker_address = taker_address
        self.fee_recipient_address = fee_recipient_address
        self.maker_asset_address = maker_asset_address
        self.maker_token_symbol = maker_token_symbol
        self.maker_token_name = maker_token_name
        self.maker_token_decimals = maker_token_decimals
        self.maker_token_usd_price = maker_token_usd_price
        self.taker_asset_address = taker_asset_address
        self.taker_token_symbol = taker_token_symbol
        self.taker_token_name = taker_token_name
        self.taker_token_decimals = taker_token_decimals
        self.taker_token_usd_price = taker_token_usd_price
        self.filled_maker_token_amount = filled_maker_token_amount
        self.filled_maker_token_unit_amount = filled_maker_token_unit_amount
        self.filled_maker_token_amount_usd = filled_maker_token_amount_usd
        self.filled_taker_token_amount = filled_taker_token_amount
        self.filled_taker_token_unit_amount = filled_taker_token_unit_amount
        self.filled_taker_token_amount_usd = filled_taker_token_amount_usd
        self.paid_maker_fee_amount = paid_maker_fee_amount
        self.paid_maker_fee_unit_amount = paid_maker_fee_unit_amount
        self.paid_maker_fee_usd = paid_maker_fee_usd
        self.paid_taker_fee_amount = paid_taker_fee_amount
        self.paid_taker_fee_unit_amount = paid_taker_fee_unit_amount
        self.paid_taker_fee_usd = paid_taker_fee_usd
        self.relayer = relayer

    @property
    def id(self):
        """Gets the id of this TradeHistoryLog.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this TradeHistoryLog.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TradeHistoryLog.

        Unique Identifier  # noqa: E501

        :param id: The id of this TradeHistoryLog.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this TradeHistoryLog.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The date_created of this TradeHistoryLog.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TradeHistoryLog.

        Date of creation  # noqa: E501

        :param date_created: The date_created of this TradeHistoryLog.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this TradeHistoryLog.  # noqa: E501

        Date of updated  # noqa: E501

        :return: The date_updated of this TradeHistoryLog.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this TradeHistoryLog.

        Date of updated  # noqa: E501

        :param date_updated: The date_updated of this TradeHistoryLog.  # noqa: E501
        :type: datetime
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def order_hash(self):
        """Gets the order_hash of this TradeHistoryLog.  # noqa: E501

        Unique, generated hash representing 0x order  # noqa: E501

        :return: The order_hash of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._order_hash

    @order_hash.setter
    def order_hash(self, order_hash):
        """Sets the order_hash of this TradeHistoryLog.

        Unique, generated hash representing 0x order  # noqa: E501

        :param order_hash: The order_hash of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if order_hash is None:
            raise ValueError("Invalid value for `order_hash`, must not be `None`")  # noqa: E501

        self._order_hash = order_hash

    @property
    def tx_hash(self):
        """Gets the tx_hash of this TradeHistoryLog.  # noqa: E501

        Transaction Hash  # noqa: E501

        :return: The tx_hash of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this TradeHistoryLog.

        Transaction Hash  # noqa: E501

        :param tx_hash: The tx_hash of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    @property
    def maker_address(self):
        """Gets the maker_address of this TradeHistoryLog.  # noqa: E501

        Address of order maker  # noqa: E501

        :return: The maker_address of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_address

    @maker_address.setter
    def maker_address(self, maker_address):
        """Sets the maker_address of this TradeHistoryLog.

        Address of order maker  # noqa: E501

        :param maker_address: The maker_address of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if maker_address is None:
            raise ValueError("Invalid value for `maker_address`, must not be `None`")  # noqa: E501

        self._maker_address = maker_address

    @property
    def taker_address(self):
        """Gets the taker_address of this TradeHistoryLog.  # noqa: E501

        Address of order taker  # noqa: E501

        :return: The taker_address of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_address

    @taker_address.setter
    def taker_address(self, taker_address):
        """Sets the taker_address of this TradeHistoryLog.

        Address of order taker  # noqa: E501

        :param taker_address: The taker_address of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if taker_address is None:
            raise ValueError("Invalid value for `taker_address`, must not be `None`")  # noqa: E501

        self._taker_address = taker_address

    @property
    def fee_recipient_address(self):
        """Gets the fee_recipient_address of this TradeHistoryLog.  # noqa: E501

        Address of order feeRecipient  # noqa: E501

        :return: The fee_recipient_address of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._fee_recipient_address

    @fee_recipient_address.setter
    def fee_recipient_address(self, fee_recipient_address):
        """Sets the fee_recipient_address of this TradeHistoryLog.

        Address of order feeRecipient  # noqa: E501

        :param fee_recipient_address: The fee_recipient_address of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if fee_recipient_address is None:
            raise ValueError("Invalid value for `fee_recipient_address`, must not be `None`")  # noqa: E501

        self._fee_recipient_address = fee_recipient_address

    @property
    def maker_asset_address(self):
        """Gets the maker_asset_address of this TradeHistoryLog.  # noqa: E501

        Address of maker token  # noqa: E501

        :return: The maker_asset_address of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_asset_address

    @maker_asset_address.setter
    def maker_asset_address(self, maker_asset_address):
        """Sets the maker_asset_address of this TradeHistoryLog.

        Address of maker token  # noqa: E501

        :param maker_asset_address: The maker_asset_address of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if maker_asset_address is None:
            raise ValueError("Invalid value for `maker_asset_address`, must not be `None`")  # noqa: E501

        self._maker_asset_address = maker_asset_address

    @property
    def maker_token_symbol(self):
        """Gets the maker_token_symbol of this TradeHistoryLog.  # noqa: E501

        Symbol of maker token  # noqa: E501

        :return: The maker_token_symbol of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_token_symbol

    @maker_token_symbol.setter
    def maker_token_symbol(self, maker_token_symbol):
        """Sets the maker_token_symbol of this TradeHistoryLog.

        Symbol of maker token  # noqa: E501

        :param maker_token_symbol: The maker_token_symbol of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if maker_token_symbol is None:
            raise ValueError("Invalid value for `maker_token_symbol`, must not be `None`")  # noqa: E501

        self._maker_token_symbol = maker_token_symbol

    @property
    def maker_token_name(self):
        """Gets the maker_token_name of this TradeHistoryLog.  # noqa: E501

        Name of maker token  # noqa: E501

        :return: The maker_token_name of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_token_name

    @maker_token_name.setter
    def maker_token_name(self, maker_token_name):
        """Sets the maker_token_name of this TradeHistoryLog.

        Name of maker token  # noqa: E501

        :param maker_token_name: The maker_token_name of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if maker_token_name is None:
            raise ValueError("Invalid value for `maker_token_name`, must not be `None`")  # noqa: E501

        self._maker_token_name = maker_token_name

    @property
    def maker_token_decimals(self):
        """Gets the maker_token_decimals of this TradeHistoryLog.  # noqa: E501

        Decimals of maker token  # noqa: E501

        :return: The maker_token_decimals of this TradeHistoryLog.  # noqa: E501
        :rtype: float
        """
        return self._maker_token_decimals

    @maker_token_decimals.setter
    def maker_token_decimals(self, maker_token_decimals):
        """Sets the maker_token_decimals of this TradeHistoryLog.

        Decimals of maker token  # noqa: E501

        :param maker_token_decimals: The maker_token_decimals of this TradeHistoryLog.  # noqa: E501
        :type: float
        """
        if maker_token_decimals is None:
            raise ValueError("Invalid value for `maker_token_decimals`, must not be `None`")  # noqa: E501

        self._maker_token_decimals = maker_token_decimals

    @property
    def maker_token_usd_price(self):
        """Gets the maker_token_usd_price of this TradeHistoryLog.  # noqa: E501

        Unit price of maker token in USD  # noqa: E501

        :return: The maker_token_usd_price of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._maker_token_usd_price

    @maker_token_usd_price.setter
    def maker_token_usd_price(self, maker_token_usd_price):
        """Sets the maker_token_usd_price of this TradeHistoryLog.

        Unit price of maker token in USD  # noqa: E501

        :param maker_token_usd_price: The maker_token_usd_price of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if maker_token_usd_price is None:
            raise ValueError("Invalid value for `maker_token_usd_price`, must not be `None`")  # noqa: E501

        self._maker_token_usd_price = maker_token_usd_price

    @property
    def taker_asset_address(self):
        """Gets the taker_asset_address of this TradeHistoryLog.  # noqa: E501

        Address of taker token  # noqa: E501

        :return: The taker_asset_address of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_asset_address

    @taker_asset_address.setter
    def taker_asset_address(self, taker_asset_address):
        """Sets the taker_asset_address of this TradeHistoryLog.

        Address of taker token  # noqa: E501

        :param taker_asset_address: The taker_asset_address of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if taker_asset_address is None:
            raise ValueError("Invalid value for `taker_asset_address`, must not be `None`")  # noqa: E501

        self._taker_asset_address = taker_asset_address

    @property
    def taker_token_symbol(self):
        """Gets the taker_token_symbol of this TradeHistoryLog.  # noqa: E501

        Symbol of taker token  # noqa: E501

        :return: The taker_token_symbol of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_token_symbol

    @taker_token_symbol.setter
    def taker_token_symbol(self, taker_token_symbol):
        """Sets the taker_token_symbol of this TradeHistoryLog.

        Symbol of taker token  # noqa: E501

        :param taker_token_symbol: The taker_token_symbol of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if taker_token_symbol is None:
            raise ValueError("Invalid value for `taker_token_symbol`, must not be `None`")  # noqa: E501

        self._taker_token_symbol = taker_token_symbol

    @property
    def taker_token_name(self):
        """Gets the taker_token_name of this TradeHistoryLog.  # noqa: E501

        Name of taker token  # noqa: E501

        :return: The taker_token_name of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_token_name

    @taker_token_name.setter
    def taker_token_name(self, taker_token_name):
        """Sets the taker_token_name of this TradeHistoryLog.

        Name of taker token  # noqa: E501

        :param taker_token_name: The taker_token_name of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if taker_token_name is None:
            raise ValueError("Invalid value for `taker_token_name`, must not be `None`")  # noqa: E501

        self._taker_token_name = taker_token_name

    @property
    def taker_token_decimals(self):
        """Gets the taker_token_decimals of this TradeHistoryLog.  # noqa: E501


        :return: The taker_token_decimals of this TradeHistoryLog.  # noqa: E501
        :rtype: float
        """
        return self._taker_token_decimals

    @taker_token_decimals.setter
    def taker_token_decimals(self, taker_token_decimals):
        """Sets the taker_token_decimals of this TradeHistoryLog.


        :param taker_token_decimals: The taker_token_decimals of this TradeHistoryLog.  # noqa: E501
        :type: float
        """
        if taker_token_decimals is None:
            raise ValueError("Invalid value for `taker_token_decimals`, must not be `None`")  # noqa: E501

        self._taker_token_decimals = taker_token_decimals

    @property
    def taker_token_usd_price(self):
        """Gets the taker_token_usd_price of this TradeHistoryLog.  # noqa: E501

        Unit price of taker token in USD  # noqa: E501

        :return: The taker_token_usd_price of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._taker_token_usd_price

    @taker_token_usd_price.setter
    def taker_token_usd_price(self, taker_token_usd_price):
        """Sets the taker_token_usd_price of this TradeHistoryLog.

        Unit price of taker token in USD  # noqa: E501

        :param taker_token_usd_price: The taker_token_usd_price of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if taker_token_usd_price is None:
            raise ValueError("Invalid value for `taker_token_usd_price`, must not be `None`")  # noqa: E501

        self._taker_token_usd_price = taker_token_usd_price

    @property
    def filled_maker_token_amount(self):
        """Gets the filled_maker_token_amount of this TradeHistoryLog.  # noqa: E501

        Base amount of maker token filled in trade  # noqa: E501

        :return: The filled_maker_token_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_maker_token_amount

    @filled_maker_token_amount.setter
    def filled_maker_token_amount(self, filled_maker_token_amount):
        """Sets the filled_maker_token_amount of this TradeHistoryLog.

        Base amount of maker token filled in trade  # noqa: E501

        :param filled_maker_token_amount: The filled_maker_token_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_maker_token_amount is None:
            raise ValueError("Invalid value for `filled_maker_token_amount`, must not be `None`")  # noqa: E501

        self._filled_maker_token_amount = filled_maker_token_amount

    @property
    def filled_maker_token_unit_amount(self):
        """Gets the filled_maker_token_unit_amount of this TradeHistoryLog.  # noqa: E501

        Unit amount of maker token filled in trade (adjusted for token decimals)  # noqa: E501

        :return: The filled_maker_token_unit_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_maker_token_unit_amount

    @filled_maker_token_unit_amount.setter
    def filled_maker_token_unit_amount(self, filled_maker_token_unit_amount):
        """Sets the filled_maker_token_unit_amount of this TradeHistoryLog.

        Unit amount of maker token filled in trade (adjusted for token decimals)  # noqa: E501

        :param filled_maker_token_unit_amount: The filled_maker_token_unit_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_maker_token_unit_amount is None:
            raise ValueError("Invalid value for `filled_maker_token_unit_amount`, must not be `None`")  # noqa: E501

        self._filled_maker_token_unit_amount = filled_maker_token_unit_amount

    @property
    def filled_maker_token_amount_usd(self):
        """Gets the filled_maker_token_amount_usd of this TradeHistoryLog.  # noqa: E501

        USD value of maker amount  # noqa: E501

        :return: The filled_maker_token_amount_usd of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_maker_token_amount_usd

    @filled_maker_token_amount_usd.setter
    def filled_maker_token_amount_usd(self, filled_maker_token_amount_usd):
        """Sets the filled_maker_token_amount_usd of this TradeHistoryLog.

        USD value of maker amount  # noqa: E501

        :param filled_maker_token_amount_usd: The filled_maker_token_amount_usd of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_maker_token_amount_usd is None:
            raise ValueError("Invalid value for `filled_maker_token_amount_usd`, must not be `None`")  # noqa: E501

        self._filled_maker_token_amount_usd = filled_maker_token_amount_usd

    @property
    def filled_taker_token_amount(self):
        """Gets the filled_taker_token_amount of this TradeHistoryLog.  # noqa: E501

        Base amount of taker token filled in trade  # noqa: E501

        :return: The filled_taker_token_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_taker_token_amount

    @filled_taker_token_amount.setter
    def filled_taker_token_amount(self, filled_taker_token_amount):
        """Sets the filled_taker_token_amount of this TradeHistoryLog.

        Base amount of taker token filled in trade  # noqa: E501

        :param filled_taker_token_amount: The filled_taker_token_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_taker_token_amount is None:
            raise ValueError("Invalid value for `filled_taker_token_amount`, must not be `None`")  # noqa: E501

        self._filled_taker_token_amount = filled_taker_token_amount

    @property
    def filled_taker_token_unit_amount(self):
        """Gets the filled_taker_token_unit_amount of this TradeHistoryLog.  # noqa: E501

        Unit amount of taker token filled in trade (adjusted for token decimals)  # noqa: E501

        :return: The filled_taker_token_unit_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_taker_token_unit_amount

    @filled_taker_token_unit_amount.setter
    def filled_taker_token_unit_amount(self, filled_taker_token_unit_amount):
        """Sets the filled_taker_token_unit_amount of this TradeHistoryLog.

        Unit amount of taker token filled in trade (adjusted for token decimals)  # noqa: E501

        :param filled_taker_token_unit_amount: The filled_taker_token_unit_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_taker_token_unit_amount is None:
            raise ValueError("Invalid value for `filled_taker_token_unit_amount`, must not be `None`")  # noqa: E501

        self._filled_taker_token_unit_amount = filled_taker_token_unit_amount

    @property
    def filled_taker_token_amount_usd(self):
        """Gets the filled_taker_token_amount_usd of this TradeHistoryLog.  # noqa: E501

        USD value of taker amount  # noqa: E501

        :return: The filled_taker_token_amount_usd of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._filled_taker_token_amount_usd

    @filled_taker_token_amount_usd.setter
    def filled_taker_token_amount_usd(self, filled_taker_token_amount_usd):
        """Sets the filled_taker_token_amount_usd of this TradeHistoryLog.

        USD value of taker amount  # noqa: E501

        :param filled_taker_token_amount_usd: The filled_taker_token_amount_usd of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if filled_taker_token_amount_usd is None:
            raise ValueError("Invalid value for `filled_taker_token_amount_usd`, must not be `None`")  # noqa: E501

        self._filled_taker_token_amount_usd = filled_taker_token_amount_usd

    @property
    def paid_maker_fee_amount(self):
        """Gets the paid_maker_fee_amount of this TradeHistoryLog.  # noqa: E501

        Base amount of ZRX fees collected from maker  # noqa: E501

        :return: The paid_maker_fee_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_maker_fee_amount

    @paid_maker_fee_amount.setter
    def paid_maker_fee_amount(self, paid_maker_fee_amount):
        """Sets the paid_maker_fee_amount of this TradeHistoryLog.

        Base amount of ZRX fees collected from maker  # noqa: E501

        :param paid_maker_fee_amount: The paid_maker_fee_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_maker_fee_amount is None:
            raise ValueError("Invalid value for `paid_maker_fee_amount`, must not be `None`")  # noqa: E501

        self._paid_maker_fee_amount = paid_maker_fee_amount

    @property
    def paid_maker_fee_unit_amount(self):
        """Gets the paid_maker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501

        Unit amount of ZRX fees collected from maker  # noqa: E501

        :return: The paid_maker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_maker_fee_unit_amount

    @paid_maker_fee_unit_amount.setter
    def paid_maker_fee_unit_amount(self, paid_maker_fee_unit_amount):
        """Sets the paid_maker_fee_unit_amount of this TradeHistoryLog.

        Unit amount of ZRX fees collected from maker  # noqa: E501

        :param paid_maker_fee_unit_amount: The paid_maker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_maker_fee_unit_amount is None:
            raise ValueError("Invalid value for `paid_maker_fee_unit_amount`, must not be `None`")  # noqa: E501

        self._paid_maker_fee_unit_amount = paid_maker_fee_unit_amount

    @property
    def paid_maker_fee_usd(self):
        """Gets the paid_maker_fee_usd of this TradeHistoryLog.  # noqa: E501

        USD value of maker fee  # noqa: E501

        :return: The paid_maker_fee_usd of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_maker_fee_usd

    @paid_maker_fee_usd.setter
    def paid_maker_fee_usd(self, paid_maker_fee_usd):
        """Sets the paid_maker_fee_usd of this TradeHistoryLog.

        USD value of maker fee  # noqa: E501

        :param paid_maker_fee_usd: The paid_maker_fee_usd of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_maker_fee_usd is None:
            raise ValueError("Invalid value for `paid_maker_fee_usd`, must not be `None`")  # noqa: E501

        self._paid_maker_fee_usd = paid_maker_fee_usd

    @property
    def paid_taker_fee_amount(self):
        """Gets the paid_taker_fee_amount of this TradeHistoryLog.  # noqa: E501

        Base amount of ZRX fees collected from taker  # noqa: E501

        :return: The paid_taker_fee_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_taker_fee_amount

    @paid_taker_fee_amount.setter
    def paid_taker_fee_amount(self, paid_taker_fee_amount):
        """Sets the paid_taker_fee_amount of this TradeHistoryLog.

        Base amount of ZRX fees collected from taker  # noqa: E501

        :param paid_taker_fee_amount: The paid_taker_fee_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_taker_fee_amount is None:
            raise ValueError("Invalid value for `paid_taker_fee_amount`, must not be `None`")  # noqa: E501

        self._paid_taker_fee_amount = paid_taker_fee_amount

    @property
    def paid_taker_fee_unit_amount(self):
        """Gets the paid_taker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501

        Unit amount of ZRX fees collected from taker  # noqa: E501

        :return: The paid_taker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_taker_fee_unit_amount

    @paid_taker_fee_unit_amount.setter
    def paid_taker_fee_unit_amount(self, paid_taker_fee_unit_amount):
        """Sets the paid_taker_fee_unit_amount of this TradeHistoryLog.

        Unit amount of ZRX fees collected from taker  # noqa: E501

        :param paid_taker_fee_unit_amount: The paid_taker_fee_unit_amount of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_taker_fee_unit_amount is None:
            raise ValueError("Invalid value for `paid_taker_fee_unit_amount`, must not be `None`")  # noqa: E501

        self._paid_taker_fee_unit_amount = paid_taker_fee_unit_amount

    @property
    def paid_taker_fee_usd(self):
        """Gets the paid_taker_fee_usd of this TradeHistoryLog.  # noqa: E501

        USD value of taker fee  # noqa: E501

        :return: The paid_taker_fee_usd of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._paid_taker_fee_usd

    @paid_taker_fee_usd.setter
    def paid_taker_fee_usd(self, paid_taker_fee_usd):
        """Sets the paid_taker_fee_usd of this TradeHistoryLog.

        USD value of taker fee  # noqa: E501

        :param paid_taker_fee_usd: The paid_taker_fee_usd of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if paid_taker_fee_usd is None:
            raise ValueError("Invalid value for `paid_taker_fee_usd`, must not be `None`")  # noqa: E501

        self._paid_taker_fee_usd = paid_taker_fee_usd

    @property
    def relayer(self):
        """Gets the relayer of this TradeHistoryLog.  # noqa: E501

        Name of originating relayer (if known)  # noqa: E501

        :return: The relayer of this TradeHistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._relayer

    @relayer.setter
    def relayer(self, relayer):
        """Sets the relayer of this TradeHistoryLog.

        Name of originating relayer (if known)  # noqa: E501

        :param relayer: The relayer of this TradeHistoryLog.  # noqa: E501
        :type: str
        """
        if relayer is None:
            raise ValueError("Invalid value for `relayer`, must not be `None`")  # noqa: E501

        self._relayer = relayer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeHistoryLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
