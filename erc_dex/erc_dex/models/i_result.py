# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from erc_dex.models.i_currency import ICurrency  # noqa: F401,E501
from erc_dex.models.i_source import ISource  # noqa: F401,E501
from erc_dex.models.i_votes import IVotes  # noqa: F401,E501


class IResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'source': 'ISource',
        'title': 'str',
        'published_at': 'datetime',
        'slug': 'str',
        'currencies': 'list[ICurrency]',
        'id': 'float',
        'created_at': 'datetime',
        'url': 'str',
        'votes': 'IVotes'
    }

    attribute_map = {
        'domain': 'domain',
        'source': 'source',
        'title': 'title',
        'published_at': 'published_at',
        'slug': 'slug',
        'currencies': 'currencies',
        'id': 'id',
        'created_at': 'created_at',
        'url': 'url',
        'votes': 'votes'
    }

    def __init__(self, domain=None, source=None, title=None, published_at=None, slug=None, currencies=None, id=None, created_at=None, url=None, votes=None):  # noqa: E501
        """IResult - a model defined in Swagger"""  # noqa: E501

        self._domain = None
        self._source = None
        self._title = None
        self._published_at = None
        self._slug = None
        self._currencies = None
        self._id = None
        self._created_at = None
        self._url = None
        self._votes = None
        self.discriminator = None

        self.domain = domain
        self.source = source
        self.title = title
        self.published_at = published_at
        self.slug = slug
        self.currencies = currencies
        self.id = id
        self.created_at = created_at
        self.url = url
        self.votes = votes

    @property
    def domain(self):
        """Gets the domain of this IResult.  # noqa: E501


        :return: The domain of this IResult.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this IResult.


        :param domain: The domain of this IResult.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def source(self):
        """Gets the source of this IResult.  # noqa: E501


        :return: The source of this IResult.  # noqa: E501
        :rtype: ISource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this IResult.


        :param source: The source of this IResult.  # noqa: E501
        :type: ISource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def title(self):
        """Gets the title of this IResult.  # noqa: E501


        :return: The title of this IResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IResult.


        :param title: The title of this IResult.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def published_at(self):
        """Gets the published_at of this IResult.  # noqa: E501


        :return: The published_at of this IResult.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this IResult.


        :param published_at: The published_at of this IResult.  # noqa: E501
        :type: datetime
        """
        if published_at is None:
            raise ValueError("Invalid value for `published_at`, must not be `None`")  # noqa: E501

        self._published_at = published_at

    @property
    def slug(self):
        """Gets the slug of this IResult.  # noqa: E501


        :return: The slug of this IResult.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this IResult.


        :param slug: The slug of this IResult.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def currencies(self):
        """Gets the currencies of this IResult.  # noqa: E501


        :return: The currencies of this IResult.  # noqa: E501
        :rtype: list[ICurrency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this IResult.


        :param currencies: The currencies of this IResult.  # noqa: E501
        :type: list[ICurrency]
        """
        if currencies is None:
            raise ValueError("Invalid value for `currencies`, must not be `None`")  # noqa: E501

        self._currencies = currencies

    @property
    def id(self):
        """Gets the id of this IResult.  # noqa: E501


        :return: The id of this IResult.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IResult.


        :param id: The id of this IResult.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this IResult.  # noqa: E501


        :return: The created_at of this IResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IResult.


        :param created_at: The created_at of this IResult.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def url(self):
        """Gets the url of this IResult.  # noqa: E501


        :return: The url of this IResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IResult.


        :param url: The url of this IResult.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def votes(self):
        """Gets the votes of this IResult.  # noqa: E501


        :return: The votes of this IResult.  # noqa: E501
        :rtype: IVotes
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this IResult.


        :param votes: The votes of this IResult.  # noqa: E501
        :type: IVotes
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")  # noqa: E501

        self._votes = votes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
