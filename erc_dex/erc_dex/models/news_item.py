# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'url': 'str',
        'title': 'str',
        'description': 'str',
        'featured': 'bool',
        'source': 'str'
    }

    attribute_map = {
        'id': 'id',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'url': 'url',
        'title': 'title',
        'description': 'description',
        'featured': 'featured',
        'source': 'source'
    }

    def __init__(self, id=None, date_created=None, date_updated=None, url=None, title=None, description=None, featured=None, source=None):  # noqa: E501
        """NewsItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date_created = None
        self._date_updated = None
        self._url = None
        self._title = None
        self._description = None
        self._featured = None
        self._source = None
        self.discriminator = None

        self.id = id
        self.date_created = date_created
        self.date_updated = date_updated
        self.url = url
        self.title = title
        self.description = description
        self.featured = featured
        self.source = source

    @property
    def id(self):
        """Gets the id of this NewsItem.  # noqa: E501

        Unique Identifier  # noqa: E501

        :return: The id of this NewsItem.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewsItem.

        Unique Identifier  # noqa: E501

        :param id: The id of this NewsItem.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this NewsItem.  # noqa: E501

        Date of creation  # noqa: E501

        :return: The date_created of this NewsItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this NewsItem.

        Date of creation  # noqa: E501

        :param date_created: The date_created of this NewsItem.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this NewsItem.  # noqa: E501

        Date of updated  # noqa: E501

        :return: The date_updated of this NewsItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this NewsItem.

        Date of updated  # noqa: E501

        :param date_updated: The date_updated of this NewsItem.  # noqa: E501
        :type: datetime
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def url(self):
        """Gets the url of this NewsItem.  # noqa: E501


        :return: The url of this NewsItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewsItem.


        :param url: The url of this NewsItem.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def title(self):
        """Gets the title of this NewsItem.  # noqa: E501


        :return: The title of this NewsItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewsItem.


        :param title: The title of this NewsItem.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this NewsItem.  # noqa: E501


        :return: The description of this NewsItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewsItem.


        :param description: The description of this NewsItem.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def featured(self):
        """Gets the featured of this NewsItem.  # noqa: E501


        :return: The featured of this NewsItem.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this NewsItem.


        :param featured: The featured of this NewsItem.  # noqa: E501
        :type: bool
        """
        if featured is None:
            raise ValueError("Invalid value for `featured`, must not be `None`")  # noqa: E501

        self._featured = featured

    @property
    def source(self):
        """Gets the source of this NewsItem.  # noqa: E501


        :return: The source of this NewsItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NewsItem.


        :param source: The source of this NewsItem.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["medium", "twitter"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
