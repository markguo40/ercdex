# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from erc_dex.models.i_token import IToken  # noqa: F401,E501


class ITokenPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_data_a': 'IToken',
        'asset_data_b': 'IToken',
        'min_amount': 'str',
        'max_amount': 'str',
        'precision': 'float',
        'base_volume': 'str',
        'quote_volume': 'str'
    }

    attribute_map = {
        'asset_data_a': 'assetDataA',
        'asset_data_b': 'assetDataB',
        'min_amount': 'minAmount',
        'max_amount': 'maxAmount',
        'precision': 'precision',
        'base_volume': 'baseVolume',
        'quote_volume': 'quoteVolume'
    }

    def __init__(self, asset_data_a=None, asset_data_b=None, min_amount=None, max_amount=None, precision=None, base_volume=None, quote_volume=None):  # noqa: E501
        """ITokenPair - a model defined in Swagger"""  # noqa: E501

        self._asset_data_a = None
        self._asset_data_b = None
        self._min_amount = None
        self._max_amount = None
        self._precision = None
        self._base_volume = None
        self._quote_volume = None
        self.discriminator = None

        self.asset_data_a = asset_data_a
        self.asset_data_b = asset_data_b
        self.min_amount = min_amount
        self.max_amount = max_amount
        self.precision = precision
        self.base_volume = base_volume
        self.quote_volume = quote_volume

    @property
    def asset_data_a(self):
        """Gets the asset_data_a of this ITokenPair.  # noqa: E501


        :return: The asset_data_a of this ITokenPair.  # noqa: E501
        :rtype: IToken
        """
        return self._asset_data_a

    @asset_data_a.setter
    def asset_data_a(self, asset_data_a):
        """Sets the asset_data_a of this ITokenPair.


        :param asset_data_a: The asset_data_a of this ITokenPair.  # noqa: E501
        :type: IToken
        """
        if asset_data_a is None:
            raise ValueError("Invalid value for `asset_data_a`, must not be `None`")  # noqa: E501

        self._asset_data_a = asset_data_a

    @property
    def asset_data_b(self):
        """Gets the asset_data_b of this ITokenPair.  # noqa: E501


        :return: The asset_data_b of this ITokenPair.  # noqa: E501
        :rtype: IToken
        """
        return self._asset_data_b

    @asset_data_b.setter
    def asset_data_b(self, asset_data_b):
        """Sets the asset_data_b of this ITokenPair.


        :param asset_data_b: The asset_data_b of this ITokenPair.  # noqa: E501
        :type: IToken
        """
        if asset_data_b is None:
            raise ValueError("Invalid value for `asset_data_b`, must not be `None`")  # noqa: E501

        self._asset_data_b = asset_data_b

    @property
    def min_amount(self):
        """Gets the min_amount of this ITokenPair.  # noqa: E501


        :return: The min_amount of this ITokenPair.  # noqa: E501
        :rtype: str
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this ITokenPair.


        :param min_amount: The min_amount of this ITokenPair.  # noqa: E501
        :type: str
        """
        if min_amount is None:
            raise ValueError("Invalid value for `min_amount`, must not be `None`")  # noqa: E501

        self._min_amount = min_amount

    @property
    def max_amount(self):
        """Gets the max_amount of this ITokenPair.  # noqa: E501


        :return: The max_amount of this ITokenPair.  # noqa: E501
        :rtype: str
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this ITokenPair.


        :param max_amount: The max_amount of this ITokenPair.  # noqa: E501
        :type: str
        """
        if max_amount is None:
            raise ValueError("Invalid value for `max_amount`, must not be `None`")  # noqa: E501

        self._max_amount = max_amount

    @property
    def precision(self):
        """Gets the precision of this ITokenPair.  # noqa: E501


        :return: The precision of this ITokenPair.  # noqa: E501
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this ITokenPair.


        :param precision: The precision of this ITokenPair.  # noqa: E501
        :type: float
        """
        if precision is None:
            raise ValueError("Invalid value for `precision`, must not be `None`")  # noqa: E501

        self._precision = precision

    @property
    def base_volume(self):
        """Gets the base_volume of this ITokenPair.  # noqa: E501


        :return: The base_volume of this ITokenPair.  # noqa: E501
        :rtype: str
        """
        return self._base_volume

    @base_volume.setter
    def base_volume(self, base_volume):
        """Sets the base_volume of this ITokenPair.


        :param base_volume: The base_volume of this ITokenPair.  # noqa: E501
        :type: str
        """
        if base_volume is None:
            raise ValueError("Invalid value for `base_volume`, must not be `None`")  # noqa: E501

        self._base_volume = base_volume

    @property
    def quote_volume(self):
        """Gets the quote_volume of this ITokenPair.  # noqa: E501


        :return: The quote_volume of this ITokenPair.  # noqa: E501
        :rtype: str
        """
        return self._quote_volume

    @quote_volume.setter
    def quote_volume(self, quote_volume):
        """Sets the quote_volume of this ITokenPair.


        :param quote_volume: The quote_volume of this ITokenPair.  # noqa: E501
        :type: str
        """
        if quote_volume is None:
            raise ValueError("Invalid value for `quote_volume`, must not be `None`")  # noqa: E501

        self._quote_volume = quote_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ITokenPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
