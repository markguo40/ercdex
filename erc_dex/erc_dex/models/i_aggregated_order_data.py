# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from erc_dex.models.i_order_book_listing import IOrderBookListing  # noqa: F401,E501


class IAggregatedOrderData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sells': 'IOrderBookListing',
        'buys': 'IOrderBookListing'
    }

    attribute_map = {
        'sells': 'sells',
        'buys': 'buys'
    }

    def __init__(self, sells=None, buys=None):  # noqa: E501
        """IAggregatedOrderData - a model defined in Swagger"""  # noqa: E501

        self._sells = None
        self._buys = None
        self.discriminator = None

        self.sells = sells
        self.buys = buys

    @property
    def sells(self):
        """Gets the sells of this IAggregatedOrderData.  # noqa: E501


        :return: The sells of this IAggregatedOrderData.  # noqa: E501
        :rtype: IOrderBookListing
        """
        return self._sells

    @sells.setter
    def sells(self, sells):
        """Sets the sells of this IAggregatedOrderData.


        :param sells: The sells of this IAggregatedOrderData.  # noqa: E501
        :type: IOrderBookListing
        """
        if sells is None:
            raise ValueError("Invalid value for `sells`, must not be `None`")  # noqa: E501

        self._sells = sells

    @property
    def buys(self):
        """Gets the buys of this IAggregatedOrderData.  # noqa: E501


        :return: The buys of this IAggregatedOrderData.  # noqa: E501
        :rtype: IOrderBookListing
        """
        return self._buys

    @buys.setter
    def buys(self, buys):
        """Sets the buys of this IAggregatedOrderData.


        :param buys: The buys of this IAggregatedOrderData.  # noqa: E501
        :type: IOrderBookListing
        """
        if buys is None:
            raise ValueError("Invalid value for `buys`, must not be `None`")  # noqa: E501

        self._buys = buys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IAggregatedOrderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
