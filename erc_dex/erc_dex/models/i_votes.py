# coding: utf-8

"""
    ERC dEX REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IVotes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'negative': 'float',
        'positive': 'float',
        'important': 'float',
        'liked': 'float',
        'disliked': 'float',
        'lol': 'float',
        'toxic': 'float',
        'saved': 'float'
    }

    attribute_map = {
        'negative': 'negative',
        'positive': 'positive',
        'important': 'important',
        'liked': 'liked',
        'disliked': 'disliked',
        'lol': 'lol',
        'toxic': 'toxic',
        'saved': 'saved'
    }

    def __init__(self, negative=None, positive=None, important=None, liked=None, disliked=None, lol=None, toxic=None, saved=None):  # noqa: E501
        """IVotes - a model defined in Swagger"""  # noqa: E501

        self._negative = None
        self._positive = None
        self._important = None
        self._liked = None
        self._disliked = None
        self._lol = None
        self._toxic = None
        self._saved = None
        self.discriminator = None

        self.negative = negative
        self.positive = positive
        self.important = important
        self.liked = liked
        self.disliked = disliked
        self.lol = lol
        self.toxic = toxic
        self.saved = saved

    @property
    def negative(self):
        """Gets the negative of this IVotes.  # noqa: E501


        :return: The negative of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this IVotes.


        :param negative: The negative of this IVotes.  # noqa: E501
        :type: float
        """
        if negative is None:
            raise ValueError("Invalid value for `negative`, must not be `None`")  # noqa: E501

        self._negative = negative

    @property
    def positive(self):
        """Gets the positive of this IVotes.  # noqa: E501


        :return: The positive of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this IVotes.


        :param positive: The positive of this IVotes.  # noqa: E501
        :type: float
        """
        if positive is None:
            raise ValueError("Invalid value for `positive`, must not be `None`")  # noqa: E501

        self._positive = positive

    @property
    def important(self):
        """Gets the important of this IVotes.  # noqa: E501


        :return: The important of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._important

    @important.setter
    def important(self, important):
        """Sets the important of this IVotes.


        :param important: The important of this IVotes.  # noqa: E501
        :type: float
        """
        if important is None:
            raise ValueError("Invalid value for `important`, must not be `None`")  # noqa: E501

        self._important = important

    @property
    def liked(self):
        """Gets the liked of this IVotes.  # noqa: E501


        :return: The liked of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._liked

    @liked.setter
    def liked(self, liked):
        """Sets the liked of this IVotes.


        :param liked: The liked of this IVotes.  # noqa: E501
        :type: float
        """
        if liked is None:
            raise ValueError("Invalid value for `liked`, must not be `None`")  # noqa: E501

        self._liked = liked

    @property
    def disliked(self):
        """Gets the disliked of this IVotes.  # noqa: E501


        :return: The disliked of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._disliked

    @disliked.setter
    def disliked(self, disliked):
        """Sets the disliked of this IVotes.


        :param disliked: The disliked of this IVotes.  # noqa: E501
        :type: float
        """
        if disliked is None:
            raise ValueError("Invalid value for `disliked`, must not be `None`")  # noqa: E501

        self._disliked = disliked

    @property
    def lol(self):
        """Gets the lol of this IVotes.  # noqa: E501


        :return: The lol of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._lol

    @lol.setter
    def lol(self, lol):
        """Sets the lol of this IVotes.


        :param lol: The lol of this IVotes.  # noqa: E501
        :type: float
        """
        if lol is None:
            raise ValueError("Invalid value for `lol`, must not be `None`")  # noqa: E501

        self._lol = lol

    @property
    def toxic(self):
        """Gets the toxic of this IVotes.  # noqa: E501


        :return: The toxic of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._toxic

    @toxic.setter
    def toxic(self, toxic):
        """Sets the toxic of this IVotes.


        :param toxic: The toxic of this IVotes.  # noqa: E501
        :type: float
        """
        if toxic is None:
            raise ValueError("Invalid value for `toxic`, must not be `None`")  # noqa: E501

        self._toxic = toxic

    @property
    def saved(self):
        """Gets the saved of this IVotes.  # noqa: E501


        :return: The saved of this IVotes.  # noqa: E501
        :rtype: float
        """
        return self._saved

    @saved.setter
    def saved(self, saved):
        """Sets the saved of this IVotes.


        :param saved: The saved of this IVotes.  # noqa: E501
        :type: float
        """
        if saved is None:
            raise ValueError("Invalid value for `saved`, must not be `None`")  # noqa: E501

        self._saved = saved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IVotes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
